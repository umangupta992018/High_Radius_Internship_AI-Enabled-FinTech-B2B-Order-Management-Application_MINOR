import React from "react";
import axios from "axios";
import { CircularProgress } from "@material-ui/core";
import InfiniteScroll from "react-infinite-scroll-component";
import { makeStyles,withStyles } from '@material-ui/core/styles';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableHead from '@material-ui/core/TableHead';
import { Checkbox } from '@material-ui/core';

const useStyles = makeStyles({
  table: {
    minWidth: 1000
  },
  tablecell: {
    fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif",
    color: 'whitesmoke',
    height: 5,
    borderBottom: "none",
    padding: "10px"
  }
});

function App() {
  const classes = useStyles();
  let [responseData, setResponseData] = React.useState([]);
  let [pageCount, setCount] = React.useState(1);

  const fetchData = async () => {
    const response = await axios
      .get(
        `http://localhost:8080/Summer_Internship_Backend/user/*?page=${pageCount}`
      )
      .catch((error) => {
        console.log(error);
      });    
      setResponseData([...responseData, ...response.data]);
  };
  
  function fetchMoreData(){
    fetchData();
    setCount(pageCount+1);
    //setLimit(50);
  }
  
  return (
    <div className="App">
        <InfiniteScroll
           dataLength={responseData.length}
           next={fetchMoreData}
           hasMore={pageCount<=2500}
           loader={
               <div
               Style={{height:"80%", paddingleft:"48%", Overflow:"hidden"}}>
                   <CircularProgress/>
                   </div>
           }
           scrollableTarget="gridscroll">
               <div>
                <Table  className={classes.table} aria-label="customized table">
                    <TableBody>
                        {responseData.map((data,index)=>(
                           <TableHead className={classes.tablerow} id='trow' hover role="checkbox" key={index.toString()}>
                           <Checkbox></Checkbox>
                           <TableCell width="12%" className={classes.tablecell} align="left"></TableCell>
                           <TableCell width="10%" className={classes.tablecell} align="left"></TableCell>
                           <TableCell width="12%" className={classes.tablecell} align="left"></TableCell>
                           <TableCell width="12%" className={classes.tablecell} align="right"></TableCell>
                           <TableCell width="15%" className={classes.tablecell} align="left"></TableCell>
                           <TableCell width="8%" className={classes.tablecell} align="right"></TableCell>
                           <TableCell width="8%" className={classes.tablecell} align="left"></TableCell>
                           <TableCell width="25%" className={classes.tablecell} align="left"></TableCell>
                         </TableHead>
                       ))}
                    </TableBody>
                    </Table>
                </div>
        </InfiniteScroll>
        </div>
  );
}
export default App;























import axios from "axios";
import React from 'react';
import Table from '@material-ui/core/Table';
import TableContainer from '@material-ui/core/TableContainer';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableHead from '@material-ui/core/TableHead';
import TableRow from '@material-ui/core/TableRow';
import Paper from '@material-ui/core/Paper';
import { CircularProgress } from "@material-ui/core";
import InfiniteScroll from "react-infinite-scroll-component";
import { Checkbox } from '@material-ui/core';

//import "./styles.css";

const styles = theme => ({
  root:
  {
    width: '100vw',
    overflow: 'scroll',
  },
  table:
  {
    minWidth: 700,
  },
});
function Table_data()
{
    let [responseData, setResponseData] = React.useState([]);
    let [isNext, isNextFunc] = React.useState(false);
    let [pageCount, setCount] = React.useState(1);
    const fetchData = () => {
      setTimeout(function()
      { 
      axios  
        .get(
          `http://localhost:8080/Summer_Internship_Backend/user/*?page=${pageCount}`)//&limit=10page=${pageCount}&limit=10
        .then((response) => 
        {
          console.log(response);
          console.log(pageCount);
          setCount(pageCount + 1);
          setResponseData([...responseData, ...response.data]);
          isNextFunc(true);
        })
        .catch((error) =>
        {
          console.log(error);
        });},100)
    };
    function fetchMoreData()
    {
      //setCount(pageCount + 1);
      if(pageCount<2500)
      {
        fetchData();
      }
      else
      {
        isNextFunc(false);  
      } 
    }
    return(
      <div className="App">
        <button type="button" onClick={fetchData}>
         </button>
        <InfiniteScroll
          dataLength={responseData.length}
          next={fetchMoreData}
          hasMore={isNext}
          loader={
            <div
              style={{ height: "80%", paddingLeft: "3%", overflow: "hidden" }}
            >
              <CircularProgress />
            </div>
          }
        >
        
        <TableContainer component={Paper}>
        <Paper className={styles.root} >
        <Table  className={styles.root}>
          <TableHead display="block" >
          </TableHead>
          <TableBody>
       
          {responseData.map(data => (
              <TableRow key={data.doc_id}>
                <Checkbox></Checkbox>
                <TableCell>{data.name_customer}</TableCell>
                <TableCell>{data.cust_number}</TableCell>
                <TableCell>{data.invoice_id}</TableCell>
                <TableCell>{data.total_open_amount}</TableCell>
                <TableCell>{data.due_in_date}</TableCell>
                <TableCell>--</TableCell>
                <TableCell>--</TableCell>
                <TableCell>{data.notes}</TableCell>
                
              </TableRow>
            ))}
          
        </TableBody>
        </Table>
        </Paper>
        </TableContainer>
        </InfiniteScroll>
      </div>
      
    );
  }
  
  export default Table_data;
 





